---
export interface Props {
    resources?: Record<string, Record<string, { pdf?: string; mscz?: string; ogg?: string }>>;
}

const { resources = {} } = Astro.props;


---

<div class="resources-section mt-12">
    <h2 class="text-3xl font-serif font-medium mb-12 text-center">Recursos Musicales</h2>

    <!-- Loading indicator -->
    <div id="resources-loading" class="text-center py-8" style="display: none;">
        <p class="text-sm text-muted">Cargando recursos...</p>
    </div>

    <!-- Error message -->
    <div id="resources-error" class="text-center py-8 text-red-600" style="display: none;">
        <p class="text-sm">Error al cargar recursos.</p>
    </div>

    <!-- Beginner category -->
    <div id="category-beginner" class="category-section mb-12">
        <h3 class="text-2xl font-serif font-medium mb-8 text-center">Canciones para Principiantes</h3>
        <div class="resource-grid grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            <div class="col-span-full text-center py-8 text-muted">
                <p class="text-sm">Cargando recursos...</p>
            </div>
        </div>
    </div>

    <!-- Intermediate category -->
    <div id="category-intermediate" class="category-section mb-12">
        <h3 class="text-2xl font-serif font-medium mb-8 text-center">Canciones Intermedias</h3>
        <div class="resource-grid grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            <div class="col-span-full text-center py-8 text-muted">
                <p class="text-sm">Cargando recursos...</p>
            </div>
        </div>
    </div>

    <!-- Advanced category -->
    <div id="category-advanced" class="category-section mb-12">
        <h3 class="text-2xl font-serif font-medium mb-8 text-center">Canciones Avanzadas</h3>
        <div class="resource-grid grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            <div class="col-span-full text-center py-8 text-muted">
                <p class="text-sm">Cargando recursos...</p>
            </div>
        </div>
    </div>
 

 </div>

 <script>
     let isLoading = false;

     async function loadResources() {
         if (isLoading) return;
         isLoading = true;

         const loadingEl = document.getElementById('resources-loading');
         const errorEl = document.getElementById('resources-error');

         try {
             if (loadingEl) loadingEl.style.display = 'block';
             if (errorEl) errorEl.style.display = 'none';

             console.log('Loading resources...');
             const response = await fetch('/api/resources');

             if (!response.ok) {
                 throw new Error(`HTTP ${response.status}: ${response.statusText}`);
             }

             const resources = await response.json();
             console.log('Resources loaded:', resources);

             updateResources(resources);

             if (loadingEl) loadingEl.style.display = 'none';

         } catch (error) {
             console.error('Error loading resources:', error);
             if (loadingEl) loadingEl.style.display = 'none';
             if (errorEl) {
                 errorEl.style.display = 'block';
                 errorEl.textContent = 'Error al cargar recursos. Inténtalo de nuevo más tarde.';
             }
         } finally {
             isLoading = false;
         }
     }

     function updateResources(resources) {
         const categories = ['beginner', 'intermediate', 'advanced'];
         const categoryTitles = {
             beginner: 'Canciones para Principiantes',
             intermediate: 'Canciones Intermedias',
             advanced: 'Canciones Avanzadas'
         };

         categories.forEach(categoryKey => {
             const categoryResources = resources[categoryKey] || {};
             const categoryEl = document.getElementById(`category-${categoryKey}`);

             if (!categoryEl) return;

             const gridEl = categoryEl.querySelector('.resource-grid');
             if (!gridEl) return;

             // Clear existing content
             gridEl.innerHTML = '';

             const resourceNames = Object.keys(categoryResources);
             if (resourceNames.length === 0) {
                 gridEl.innerHTML = '<div class="col-span-full text-center py-8 text-muted"><p class="text-sm">No hay recursos en esta categoría aún.</p></div>';
                 return;
             }

             resourceNames.forEach(name => {
                 const files = categoryResources[name];
                 const card = createResourceCard(name, files);
                 gridEl.appendChild(card);
             });
         });
     }

     function createResourceCard(name, files) {
         const card = document.createElement('div');
         card.className = 'resource-card bg-white border border-gray-200 rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow';

         const title = document.createElement('h3');
         title.className = 'text-lg font-medium mb-4 text-center capitalize text-black';
         title.textContent = name.replace(/[-_]/g, ' ');
         card.appendChild(title);

         const buttonContainer = document.createElement('div');
         buttonContainer.className = 'flex flex-wrap gap-2 justify-center';

         if (files.pdf) {
             const pdfBtn = createDownloadButton('PDF', files.pdf, name, 'pdf', 'blue');
             buttonContainer.appendChild(pdfBtn);
         }

         if (files.mscz) {
             const msczBtn = createDownloadButton('MSCZ', files.mscz, name, 'mscz', 'green');
             buttonContainer.appendChild(msczBtn);
         }

         if (files.ogg) {
             const audioDiv = document.createElement('div');
             audioDiv.className = 'audio-preview mt-3 w-full flex justify-center';
             const audio = document.createElement('audio');
             audio.controls = true;
             audio.className = 'audio-player';
             audio.preload = 'none';
             audio.style.maxWidth = '200px';
             audio.style.width = '100%';
             audio.style.height = '40px';

             const source = document.createElement('source');
             source.src = files.ogg;
             source.type = 'audio/ogg';
             audio.appendChild(source);
             audio.appendChild(document.createTextNode('Tu navegador no soporta reproducción de audio.'));

             audioDiv.appendChild(audio);
             buttonContainer.appendChild(audioDiv);
         }

         card.appendChild(buttonContainer);

         const countDiv = document.createElement('div');
         countDiv.className = 'mt-4 text-xs text-gray-500 text-center';
         const count = Object.keys(files).length;
         countDiv.textContent = `${count} archivo${count !== 1 ? 's' : ''} disponible${count !== 1 ? 's' : ''}`;
         card.appendChild(countDiv);

         return card;
     }

      function createDownloadButton(text, dataUrl, name, ext, color) {
          const btn = document.createElement('a');
          btn.href = dataUrl;
          btn.download = `${name.replace(/[-_]/g, ' ')}.${ext}`;

          // Use better contrast colors that work with the site's theme
          let bgColor, textColor, hoverColor, borderColor;
          if (color === 'blue') {
              bgColor = 'bg-blue-600';
              textColor = 'text-white';
              hoverColor = 'hover:bg-blue-700';
              borderColor = 'border-blue-600 hover:border-blue-700';
          } else if (color === 'green') {
              bgColor = 'bg-green-600';
              textColor = 'text-white';
              hoverColor = 'hover:bg-green-700';
              borderColor = 'border-green-600 hover:border-green-700';
          } else {
              // Fallback
              bgColor = 'bg-gray-600';
              textColor = 'text-white';
              hoverColor = 'hover:bg-gray-700';
              borderColor = 'border-gray-600 hover:border-gray-700';
          }

          btn.className = `inline-flex items-center px-3 py-2 text-sm font-medium ${textColor} ${bgColor} border ${borderColor} rounded-md ${hoverColor} transition-colors`;
          btn.title = `Descargar ${ext.toUpperCase()}`;
          btn.textContent = text;
          return btn;
      }

     // Load resources when component mounts
     document.addEventListener('DOMContentLoaded', () => {
         loadResources();
     });
 </script>

 <style>
    .resource-card {
        transition: all 0.2s ease-in-out;
    }

    .resource-card:hover {
        transform: translateY(-2px);
    }

    .audio-preview {
        margin-top: 0.75rem;
        width: 100%;
        display: flex;
        justify-content: center;
    }

    .audio-player {
        width: 100%;
        max-width: 200px;
        height: 40px;
        border-radius: 6px;
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        outline: none;
    }

    .audio-player:focus {
        outline: 2px solid #3b82f6;
        outline-offset: 2px;
    }

    /* Ocultar barra de progreso y controles de tiempo para diseño minimalista */
    .audio-player::-webkit-media-controls-timeline,
    .audio-player::-webkit-media-controls-current-time-display,
    .audio-player::-webkit-media-controls-time-remaining-display {
        display: none !important;
    }

    /* Firefox */
    .audio-player::-moz-range-track {
        display: none;
    }

    /* Responsive */
    @media (max-width: 640px) {
        .audio-player {
            max-width: 150px;
            height: 36px;
        }
    }
</style>