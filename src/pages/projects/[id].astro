---
export const prerender = true;

import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import ProjectPreview from '../../components/ProjectPreview.astro';
import ResourcesList from '../../components/ResourcesList.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { getTranslations, t } from '../../utils/i18n';

export async function getStaticPaths() {
    const allProjects = await getCollection('projects');
    const projects = allProjects.filter(p => p.data.locale === 'es').sort(sortItemsByDateDesc);
    const projectCount = projects.length;
    return projects.map((project, index) => ({
        params: { id: project.id.replace(/\..*$/, '') },
        props: {
            project,
            prevProject: index + 1 !== projectCount ? projects[index + 1] : null,
            nextProject: index !== 0 ? projects[index - 1] : null
        }
    }));
}

type Props = { project: CollectionEntry<'projects'>; prevProject: CollectionEntry<'projects'>; nextProject: CollectionEntry<'projects'> };

const { project, prevProject, nextProject } = Astro.props;
const { title, description, seo } = project.data;
const { Content } = await render(project);
const currentLocale = 'es';
const translations = await getTranslations(currentLocale);

// Cargar recursos del lado del servidor
let resources = {};
if (project.id.startsWith('uerdf')) {
    try {
        const response = await fetch(`${Astro.url.origin}/api/resources`);
        if (response.ok) {
            resources = await response.json();
        }
    } catch (error) {
        console.error('Error loading resources:', error);
    }
}
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? description} image={seo?.image} pageType="article" showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
        </header>
        <div class="max-w-none prose prose-dante sm:prose-lg">
            <Content />
        </div>

        <!-- Mostrar recursos solo para el proyecto UERDF -->
        {project.id.startsWith('uerdf') && <ResourcesList resources={resources} />}
    </article>
    {
        (prevProject || nextProject) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">{t('view_next', translations)}</h2>
                {nextProject && <ProjectPreview project={nextProject} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevProject && <ProjectPreview project={prevProject} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
</BaseLayout>
