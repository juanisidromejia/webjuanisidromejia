---
export const prerender = true;

import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import ProjectPreview from '../../components/ProjectPreview.astro';
import ResourcesList from '../../components/ResourcesList.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { getTranslations, t } from '../../utils/i18n';

export async function getStaticPaths() {
    const allProjects = await getCollection('projects');
    const projects = allProjects.sort(sortItemsByDateDesc);
    const projectCount = projects.length;
    return projects.map((project, index) => ({
        params: { id: project.id },
        props: {
            project,
            prevProject: index + 1 !== projectCount ? projects[index + 1] : null,
            nextProject: index !== 0 ? projects[index - 1] : null
        }
    }));
}

type Props = { project: CollectionEntry<'projects'>; prevProject: CollectionEntry<'projects'>; nextProject: CollectionEntry<'projects'> };

const { project, prevProject, nextProject } = Astro.props;
const currentLang = 'es'; // Default for static generation
const data = project.data as any;
const title = data[`title_${currentLang}`] || data.title_es;
const description = data[`description_${currentLang}`] || data.description_es;
const { Content } = await render(project);
const translations = await getTranslations(currentLang);

// Recursos se cargan del lado del cliente
let resources = {};
---

<BaseLayout title={title} description={description} pageType="article" showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 id="project-title" class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
        </header>
        <div id="project-description" class="max-w-none prose prose-dante sm:prose-lg">
            <Content />
        </div>

        <!-- Mostrar recursos solo para el proyecto UERDF -->
        {project.id.startsWith('uerdf') && <ResourcesList resources={resources} client:load />}
    </article>
    {
        (prevProject || nextProject) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">{t('view_next', translations)}</h2>
                {nextProject && <ProjectPreview project={nextProject} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevProject && <ProjectPreview project={prevProject} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
</BaseLayout>

<script is:inline define:vars={{ project: project.data }}>
    // Function to update content based on language
    const updateContent = (lang) => {
        const data = project;
        const title = data[`title_${lang}`] || data.title_es;
        const description = data[`description_${lang}`] || data.description_es;

        const titleEl = document.getElementById('project-title');
        if (titleEl) titleEl.textContent = title;

        const descEl = document.getElementById('project-description');
        if (descEl) {
            // Update meta description if needed
            const metaDesc = document.querySelector('meta[name="description"]');
            if (metaDesc) metaDesc.setAttribute('content', description);
        }
    };

    // Listen to language changes
    document.addEventListener('languageChange', (e) => {
        updateContent(e.detail);
    });

    // Initial update with current language
    if (typeof window !== 'undefined' && window.currentLang) {
        updateContent(window.currentLang);
    }
</script>
