---
export const prerender = true;

import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import { getTranslations } from '../utils/i18n';

export async function getStaticPaths() {
    const pages = await getCollection('pages');
    return pages.map((page) => {
        return {
            params: { id: page.id },
            props: { page }
        };
    });
}

type Props = { page: CollectionEntry<'pages'> };

const { page } = Astro.props;
const currentLocale = Astro.currentLocale || 'es';
const title = page.data[`title_${currentLocale}`] || page.data.title_es || page.data.title;
const { seo } = page.data;
const { Content } = await render(page);

const translations = await getTranslations(currentLocale);

// Para las páginas traducidas, usar traducciones para subtítulos y descripciones
const isContactPage = page.id === 'contact';
const isAboutPage = page.id === 'about';
const isTermsPage = page.id === 'terms';

let pageTitle = seo?.title ?? title;
let pageDescription = seo?.description;

if (isContactPage) {
    pageDescription = translations.contact_text;
} else if (isAboutPage) {
    pageDescription = translations.about_text;
}
---

<BaseLayout title={pageTitle} description={pageDescription} image={seo?.image} showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">
                {isContactPage ? translations.contact_title : isAboutPage ? translations.about_title : isTermsPage ? translations.terms : title}
            </h1>
            {(isContactPage || isAboutPage) && (
                <p class="mt-4 text-lg text-muted">
                    {isContactPage ? translations.contact_subtitle : translations.about_subtitle}
                </p>
            )}
        </header>
        <div class="max-w-none prose prose-dante sm:prose-lg">
            <Content />
        </div>
    </article>
</BaseLayout>
