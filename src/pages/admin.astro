---
export const prerender = false;

// Verificación de autenticación con cookie
const authCookie = Astro.cookies.get('admin_auth');

if (!authCookie || authCookie.value !== 'true') {
  return Astro.redirect('/admin/login');
}

import BaseLayout from '../layouts/BaseLayout.astro';
import { getTranslations } from '../utils/i18n';

interface Newsletter {
  id: string;
  title: string;
  content: string;
  date: string;
  status: 'draft' | 'sent';
  sentAt?: string;
}

interface Subscriber {
  id: string;
  name: string;
  email: string;
  active: boolean;
  subscribedAt: string;
}

const currentLocale = Astro.currentLocale || 'es';
const translations = await getTranslations(currentLocale);

// Leer datos del newsletter usando Netlify Blobs
import { getStore } from '@netlify/blobs';

let newsletterData = { newsletters: [], subscribers: [] };
try {
  const store = getStore('newsletter');
  const data = await store.get('data');
  if (data) {
    newsletterData = JSON.parse(data);
  }
} catch (error) {
  console.error('Error reading newsletter data:', error);
}

const { newsletters, subscribers } = newsletterData as { newsletters: Newsletter[]; subscribers: Subscriber[] };
---

<BaseLayout title="Panel de Administración - Newsletter" showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <div class="flex justify-between items-start">
                <div>
                    <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">Panel de Administración</h1>
                    <p class="mt-4 text-lg text-muted">Gestión del Newsletter Musical</p>
                </div>
                <form action="/api/logout" method="post" class="inline">
                    <button type="submit" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                        Cerrar Sesión
                    </button>
                </form>
            </div>
        </header>

        <div class="max-w-none prose prose-dante sm:prose-lg">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
                <!-- Estadísticas -->
                <div class="bg-main/5 p-6 rounded-lg border border-main/20">
                    <h3 class="text-xl font-semibold mb-4">Estadísticas</h3>
                    <div class="space-y-2">
                        <p><strong>Suscriptores activos:</strong> {subscribers.filter(s => s.active).length}</p>
                        <p><strong>Newsletters enviados:</strong> {newsletters.filter(n => n.status === 'sent').length}</p>
                        <p><strong>Newsletters pendientes:</strong> {newsletters.filter(n => n.status === 'draft').length}</p>
                    </div>
                </div>

                <!-- Crear nuevo newsletter -->
                <div class="bg-main/5 p-6 rounded-lg border border-main/20">
                    <h3 class="text-xl font-semibold mb-4">Crear Nuevo Newsletter</h3>
                    <div id="message" class="mb-4 hidden"></div>
                    <form id="newsletterForm" class="space-y-4">
                        <div>
                            <label for="title" class="block text-sm font-medium mb-1">Título</label>
                            <input
                                type="text"
                                id="title"
                                name="title"
                                required
                                class="w-full px-3 py-2 border border-main/30 rounded-md bg-transparent"
                                placeholder="Título del newsletter"
                            />
                        </div>
                        <div>
                            <label for="content" class="block text-sm font-medium mb-1">Contenido</label>
                            <textarea
                                id="content"
                                name="content"
                                rows="6"
                                required
                                class="w-full px-3 py-2 border border-main/30 rounded-md bg-transparent"
                                placeholder="Contenido del newsletter..."
                            ></textarea>
                        </div>
                        <button
                            type="submit"
                            id="submitBtn"
                            class="w-full bg-main text-white px-4 py-2 rounded-md hover:bg-main/80 transition-colors"
                        >
                            Crear Newsletter
                        </button>
                      </form>
                  </div>


              </div>

               <!-- Subida de recursos -->
              <div class="bg-main/5 p-6 rounded-lg border border-main/20 mt-8">
                  <h3 class="text-xl font-semibold mb-4">Subir Recursos Musicales</h3>
                  <form id="uploadForm" enctype="multipart/form-data" class="space-y-4">
                      <div>
                          <label for="category" class="block text-sm font-medium mb-1">Categoría</label>
                          <select
                              id="category"
                              name="category"
                              required
                              class="w-full px-3 py-2 border border-main/30 rounded-md bg-transparent"
                          >
                              <option value="intermediate">Intermedio (Predeterminado)</option>
                              <option value="beginner">Principiante</option>
                              <option value="advanced">Avanzado</option>
                          </select>
                          <p class="text-xs text-muted mt-1">
                              Selecciona la categoría de dificultad para las canciones.
                          </p>
                      </div>
                      <div>
                          <label for="files" class="block text-sm font-medium mb-1">
                              Seleccionar archivos (PDF, MSCZ, OGG)
                          </label>
                          <input
                              type="file"
                              id="files"
                              name="files"
                              multiple
                              accept=".pdf,.mscz,.ogg"
                              required
                              class="w-full px-3 py-2 border border-main/30 rounded-md bg-transparent file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-main file:text-white hover:file:bg-main/80"
                          />
                          <p class="text-xs text-muted mt-1">
                              Puedes seleccionar múltiples archivos. Los archivos con el mismo nombre se agruparán automáticamente.
                          </p>
                      </div>
                     <button
                         type="submit"
                         id="uploadBtn"
                         class="w-full bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
                     >
                         Subir Recursos
                     </button>
                 </form>
                  <div id="uploadMessage" class="mt-4 hidden"></div>
              </div>

              <!-- Gestión de recursos -->
              <div class="bg-main/5 p-6 rounded-lg border border-main/20 mt-8">
                  <h3 class="text-xl font-semibold mb-4">Gestión de Recursos Musicales</h3>
                  <div id="resourceMessage" class="mb-4 hidden"></div>

                  <!-- Eliminar canción -->
                  <div class="mb-6">
                      <h4 class="font-medium mb-3">Eliminar Canción</h4>
                      <div class="flex gap-3">
                          <select id="songSelector" class="flex-1 px-3 py-2 border border-main/30 rounded-md bg-transparent">
                              <option value="">Seleccionar canción...</option>
                              <!-- Opciones cargadas dinámicamente -->
                          </select>
                          <button id="deleteSongBtn" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 disabled:opacity-50">
                              Eliminar
                          </button>
                      </div>
                      <p class="text-xs text-muted mt-2">
                          Selecciona una canción para eliminar todos sus archivos asociados.
                      </p>
                  </div>

                  <!-- Estado de categorías -->
                  <div class="grid grid-cols-3 gap-4 text-center">
                      <div class="p-3 bg-green-50 rounded">
                          <div class="font-medium text-green-800">Canciones para Principiantes</div>
                          <div class="text-sm text-green-600" id="beginner-count">0 canciones</div>
                      </div>
                      <div class="p-3 bg-blue-50 rounded">
                          <div class="font-medium text-blue-800">Canciones Intermedias</div>
                          <div class="text-sm text-blue-600" id="intermediate-count">0 canciones</div>
                      </div>
                      <div class="p-3 bg-purple-50 rounded">
                          <div class="font-medium text-purple-800">Canciones Avanzadas</div>
                          <div class="text-sm text-purple-600" id="advanced-count">0 canciones</div>
                      </div>
                  </div>
              </div>

              <!-- Lista de newsletters -->
            <div class="bg-main/5 p-6 rounded-lg border border-main/20">
                <h3 class="text-xl font-semibold mb-4">Newsletters Recientes</h3>
                <div class="space-y-4">
                    {newsletters.slice(0, 5).map((newsletter) => (
                        <div class="border-b border-main/10 pb-4 last:border-b-0">
                            <div class="flex justify-between items-start mb-2">
                                <h4 class="font-medium">{newsletter.title}</h4>
                                <div class="flex items-center space-x-2">
                                    <span class={`px-2 py-1 text-xs rounded ${
                                        newsletter.status === 'sent'
                                            ? 'bg-green-100 text-green-800'
                                            : 'bg-yellow-100 text-yellow-800'
                                    }`}>
                                        {newsletter.status === 'sent' ? 'Enviado' : 'Borrador'}
                                    </span>
                                    {newsletter.status === 'draft' && (
                                        <button
                                            class="send-newsletter-btn px-3 py-1 text-xs bg-blue-500 text-white rounded hover:bg-blue-600"
                                            data-newsletter-id={newsletter.id}
                                        >
                                            Enviar
                                        </button>
                                    )}
                                </div>
                            </div>
                            <p class="text-sm text-muted mb-2">{newsletter.content.substring(0, 100)}...</p>
                            <p class="text-xs text-muted">Fecha: {newsletter.date}</p>
                        </div>
                    ))}
                </div>
            </div>

             <!-- Gestión de suscriptores -->
             <div class="bg-main/5 p-6 rounded-lg border border-main/20 mt-8">
                 <h3 class="text-xl font-semibold mb-4">Gestión de Suscriptores</h3>
                 <div id="subscriberMessage" class="mb-4 hidden"></div>

                 <!-- Desactivar suscriptor -->
                 <div class="mb-6">
                     <h4 class="font-medium mb-3">Desactivar Suscriptor</h4>
                     <div class="flex gap-3">
                         <select id="subscriberSelector" class="flex-1 px-3 py-2 border border-main/30 rounded-md bg-transparent">
                             <option value="">Seleccionar suscriptor...</option>
                             {subscribers.filter(s => s.active).map((subscriber) => (
                                 <option value={subscriber.id}>{subscriber.name} ({subscriber.email})</option>
                             ))}
                         </select>
                         <button id="deactivateSubscriberBtn" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 disabled:opacity-50">
                             Desactivar
                         </button>
                     </div>
                     <p class="text-xs text-muted mt-2">
                         Selecciona un suscriptor activo para desactivarlo. No podrá recibir más newsletters.
                     </p>
                 </div>

                 <!-- Estadísticas de suscriptores -->
                 <div class="grid grid-cols-2 gap-4 text-center">
                     <div class="p-3 bg-green-50 rounded">
                         <div class="font-medium text-green-800">Suscriptores Activos</div>
                         <div class="text-sm text-green-600" id="active-subscribers-count">{subscribers.filter(s => s.active).length}</div>
                     </div>
                     <div class="p-3 bg-red-50 rounded">
                         <div class="font-medium text-red-800">Suscriptores Inactivos</div>
                         <div class="text-sm text-red-600" id="inactive-subscribers-count">{subscribers.filter(s => !s.active).length}</div>
                     </div>
                 </div>
             </div>
        </div>
    </article>

    <script>
        document.getElementById('newsletterForm')?.addEventListener('submit', async (e) => {
            e.preventDefault();

            const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
            const messageDiv = document.getElementById('message') as HTMLDivElement;
            const originalText = submitBtn.textContent;

            // Deshabilitar botón
            submitBtn.disabled = true;
            submitBtn.textContent = 'Creando...';

            try {
                const formData = new FormData(e.target as HTMLFormElement);
                const response = await fetch('/api/newsletter', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (response.ok) {
                    messageDiv.className = 'mb-4 p-3 bg-green-100 text-green-800 rounded-md';
                    messageDiv.textContent = 'Newsletter creado exitosamente';
                    messageDiv.classList.remove('hidden');

                    // Limpiar formulario
                    (e.target as HTMLFormElement).reset();

                    // Recargar página después de 2 segundos
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    throw new Error(result.error || 'Error al crear newsletter');
                }
            } catch (error) {
                messageDiv.className = 'mb-4 p-3 bg-red-100 text-red-800 rounded-md';
                messageDiv.textContent = (error as Error).message;
                messageDiv.classList.remove('hidden');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        });

        // Enviar newsletter
        document.addEventListener('click', async (e) => {
            const target = e.target as HTMLElement;
            if (target?.classList.contains('send-newsletter-btn')) {
                const newsletterId = target.dataset.newsletterId;
                const btn = target as HTMLButtonElement;
                const originalText = btn.textContent;

                btn.disabled = true;
                btn.textContent = 'Enviando...';

                try {
                    const response = await fetch('/api/send-newsletter', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ newsletterId })
                    });

                    const result = await response.json();

                    if (response.ok) {
                        alert(`Newsletter enviado exitosamente a ${result.sentCount} suscriptores`);
                        window.location.reload();
                    } else {
                        throw new Error(result.error || 'Error al enviar newsletter');
                    }
                } catch (error) {
                    alert('Error: ' + (error as Error).message);
                } finally {
                    btn.disabled = false;
                    btn.textContent = originalText;
                }
            }
        });

        // Subida de recursos
        document.getElementById('uploadForm')?.addEventListener('submit', async (e) => {
            e.preventDefault();

            const form = e.target as HTMLFormElement;
            const formData = new FormData(form);
            const uploadBtn = document.getElementById('uploadBtn') as HTMLButtonElement;
            const messageDiv = document.getElementById('uploadMessage') as HTMLDivElement;

            const originalText = uploadBtn.textContent;
            uploadBtn.disabled = true;
            uploadBtn.textContent = 'Subiendo...';

            try {
                const response = await fetch('/api/upload-resources', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (response.ok) {
                    messageDiv.className = 'p-3 bg-green-100 text-green-800 rounded-md';
                    messageDiv.textContent = `¡Recursos subidos exitosamente! ${result.uploadedCount} archivo(s) procesado(s).`;
                    messageDiv.classList.remove('hidden');

                    // Limpiar formulario
                    form.reset();

                    // Ocultar mensaje después de 5 segundos
                    setTimeout(() => {
                        messageDiv.classList.add('hidden');
                    }, 5000);
                } else {
                    throw new Error(result.error || 'Error al subir recursos');
                }
            } catch (error) {
                messageDiv.className = 'p-3 bg-red-100 text-red-800 rounded-md';
                messageDiv.textContent = 'Error: ' + (error as Error).message;
                messageDiv.classList.remove('hidden');
            } finally {
                uploadBtn.disabled = false;
                uploadBtn.textContent = originalText;
            }
        });

        // Cargar recursos musicales
        async function loadResources() {
            try {
                const response = await fetch('/api/resources');
                if (response.ok) {
                    const resources = await response.json();
                    populateSongSelector(resources);
                    updateCategoryCounts(resources);
                }
            } catch (error) {
                console.error('Error loading resources:', error);
            }
        }

        function populateSongSelector(resources: any) {
            const songSelector = document.getElementById('songSelector') as HTMLSelectElement;
            if (!songSelector) return;

            // Limpiar opciones existentes excepto la primera
            while (songSelector.options.length > 1) {
                songSelector.remove(1);
            }

            const categories = ['beginner', 'intermediate', 'advanced'];
            const categoryLabels: Record<string, string> = {
                beginner: 'Principiante',
                intermediate: 'Intermedio',
                advanced: 'Avanzado'
            };

            categories.forEach(category => {
                const categoryResources = resources[category] || {};
                const resourceNames = Object.keys(categoryResources);

                resourceNames.forEach(songName => {
                    const option = document.createElement('option');
                    option.value = songName;
                    option.textContent = `${songName.replace(/[-_]/g, ' ')} (${categoryLabels[category]})`;
                    option.dataset.category = category;
                    songSelector.appendChild(option);
                });
            });

            // Actualizar estado del botón eliminar
            updateDeleteButtonState();
        }

        function updateCategoryCounts(resources: any) {
            const categories = ['beginner', 'intermediate', 'advanced'];
            const countElements: Record<string, HTMLElement> = {
                beginner: document.getElementById('beginner-count')!,
                intermediate: document.getElementById('intermediate-count')!,
                advanced: document.getElementById('advanced-count')!
            };

            categories.forEach(category => {
                const categoryResources = resources[category] || {};
                const songCount = Object.keys(categoryResources).length;
                const element = countElements[category];
                if (element) {
                    element.textContent = `${songCount} canción${songCount !== 1 ? 'es' : ''}`;
                }
            });
        }

        function updateDeleteButtonState() {
            const songSelector = document.getElementById('songSelector') as HTMLSelectElement;
            const deleteBtn = document.getElementById('deleteSongBtn') as HTMLButtonElement;
            if (songSelector && deleteBtn) {
                deleteBtn.disabled = !songSelector.value;
            }
        }

        // Actualizar estado del botón eliminar cuando cambia la selección
        document.getElementById('songSelector')?.addEventListener('change', updateDeleteButtonState);

        // Eliminar canción
        document.getElementById('deleteSongBtn')?.addEventListener('click', async () => {
            const songSelector = document.getElementById('songSelector') as HTMLSelectElement;
            const selectedOption = songSelector.selectedOptions[0];
            if (!selectedOption || !selectedOption.value) return;

            const songName = selectedOption.value;
            const category = selectedOption.dataset.category;

            if (!confirm(`¿Estás seguro de que quieres eliminar la canción "${songName}" de la categoría ${category}? Se eliminarán todos los archivos asociados.`)) {
                return;
            }

            const btn = document.getElementById('deleteSongBtn') as HTMLButtonElement;
            const originalText = btn.textContent;
            const messageDiv = document.getElementById('resourceMessage') as HTMLDivElement;

            btn.disabled = true;
            btn.textContent = 'Eliminando...';

            try {
                const response = await fetch('/api/delete-resource', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ songName, category })
                });

                const result = await response.json();

                if (response.ok) {
                    messageDiv.className = 'p-3 bg-green-100 text-green-800 rounded-md';
                    messageDiv.textContent = result.message;
                    messageDiv.classList.remove('hidden');

                    // Recargar recursos
                    loadResources();

                    // Ocultar mensaje después de 5 segundos
                    setTimeout(() => {
                        messageDiv.classList.add('hidden');
                    }, 5000);
                } else {
                    throw new Error(result.error || 'Error al eliminar recurso');
                }
            } catch (error) {
                messageDiv.className = 'p-3 bg-red-100 text-red-800 rounded-md';
                messageDiv.textContent = 'Error: ' + (error as Error).message;
                messageDiv.classList.remove('hidden');
            } finally {
                btn.disabled = false;
                btn.textContent = originalText;
            }
        });

        // Actualizar estado del botón desactivar suscriptor
        document.getElementById('subscriberSelector')?.addEventListener('change', () => {
            const subscriberSelector = document.getElementById('subscriberSelector') as HTMLSelectElement;
            const deactivateBtn = document.getElementById('deactivateSubscriberBtn') as HTMLButtonElement;
            deactivateBtn.disabled = !subscriberSelector.value;
        });

        // Desactivar suscriptor desde dropdown
        document.getElementById('deactivateSubscriberBtn')?.addEventListener('click', async () => {
            const subscriberSelector = document.getElementById('subscriberSelector') as HTMLSelectElement;
            const userId = subscriberSelector.value;
            if (!userId) return;

            if (!confirm('¿Estás seguro de que quieres desactivar a este suscriptor? No podrá recibir más newsletters.')) {
                return;
            }

            const btn = document.getElementById('deactivateSubscriberBtn') as HTMLButtonElement;
            const originalText = btn.textContent;
            const messageDiv = document.getElementById('subscriberMessage') as HTMLDivElement;

            btn.disabled = true;
            btn.textContent = 'Desactivando...';

            try {
                const response = await fetch('/api/unsubscribe-user', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ userId })
                });

                const result = await response.json();

                if (response.ok) {
                    messageDiv.className = 'p-3 bg-green-100 text-green-800 rounded-md';
                    messageDiv.textContent = result.message;
                    messageDiv.classList.remove('hidden');

                    // Recargar página para actualizar la lista y dropdown
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    throw new Error(result.error || 'Error al desactivar suscriptor');
                }
            } catch (error) {
                messageDiv.className = 'p-3 bg-red-100 text-red-800 rounded-md';
                messageDiv.textContent = 'Error: ' + (error as Error).message;
                messageDiv.classList.remove('hidden');
            } finally {
                btn.disabled = false;
                btn.textContent = originalText;
            }
        });



        // Cargar recursos al cargar la página
        loadResources();
    </script>
</BaseLayout>